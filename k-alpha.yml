---
- name: "Installing alpha-master Kubernetes cluster machine and rest of masters and workers"
  hosts: alpha
  vars_files:
    - vars/alph-variables
    - vars/metallb
    - vars/host_values
  tasks:
    - name: "Alpha master adding kubernetes repo"
      copy:
        src: templates/kubernetes.repo
        dest: /etc/yum.repos.d/kubernetes.repo

    - name: "Installing yum-utils and chrony"
      yum:
        name:
          - yum-utils
          - chrony
        state: latest
        update_cache: True

    - name: "Setting timezone to Asia/Kolkata"
      timezone:
        name: Asia/Kolkata

    - name: "Syncing with NTP Servers"
      shell:
        cmd: 'timedatectl set-ntp true'

    - name: "restarting chrony"
      systemd:
        name: chronyd
        state: restarted
        enabled: yes

    - name: "Adding docker repository"
      shell:
        cmd: 'yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo'

    - name: "Enabling rp_filter"
      shell:
        cmd: 'echo 1 > /proc/sys/net/ipv4/conf/all/rp_filter'

    - name: "Pakckage updating to the latest version"
      yum:
        name: "*"
        state: present
        update_cache: true

    - name: " {{ item.name }} installing"
      yum:
        name: "{{ item.name }}"
        state: latest
        update_cache: True

      when: item.required == True
      loop: "{{ packages }}"

    - name: "Starting and enabling docker and kubelet"
      systemd:
        name: docker
        state: restarted
        enabled: yes

    - systemd:
        name: kubelet
        state: restarted
        enabled: yes

    - name: "Changing docker drive to systemd from chroot"
      lineinfile:
        path: /usr/lib/systemd/system/docker.service
        regexp: '^(.*)ExecStart=(.*)$'
        line: 'ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --exec-opt native.cgroupdriver=systemd'
        backrefs: yes

    - name: "Creating environment for kubelet"
      file:
        path: /etc/systemd/system/kubelet.service.d/
        owner: root
        group: root
        state: directory
        mode: '0755'

    - name: "Enabling Memory and Accounting"
      shell:
        cmd: 'echo -e "[Service]\nCPUAccounting=true\nMemoryAccounting=true" > /etc/systemd/system/kubelet.service.d/11-cgroups.conf'

    - name: "Disabling SELinux"
      selinux:
        state: disabled
      register: sestatus

    - name: "Setting up the Hostname as per the convension"
      hostname:
        name: "{{ host_name }}"

    - name: "Copying the content to remote etc_hosts"
      template:
        src: templates/remote_hosts.tmpl
        dest: /etc/hosts
        mode: 644
        owner: root
        group: root
        backup: yes

    - name: "Rebooting the machine to implement the selinux status permanent"
      reboot:
      when: sestatus.changed == true
      
    - name: "Waiting for server to back online"
      local_action:
        module: wait_for
          host={{ inventory_hostname }}
          port=22
          delay=10
          timeout=60
      when: sestatus.changed == true

    - name: "Implementing firewall rules as per kubernetes requirement"
      firewalld:
        port: "{{item.port}}/{{item.proto}}"
        permanent: yes
        state: enabled
      loop: "{{ m_ports }}"

    - name: "modprob br_netfilter enable and forward rules"
      shell:
        cmd: 'modprobe br_netfilter'
        
    - shell:
        cmd: "echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables"
        
    - shell:
        cmd: "echo '1' > /proc/sys/net/ipv4/ip_forward"

    - name: "Creating the check_api shell for keepalived"
      template:
        src: templates/check_apiserver.sh_templ
        dest: /etc/keepalived/check_apiserver.sh
        mode: '755'

    - name: "Creating keepalived.conf"
      template:
        src: templates/keepalived.conf.templ
        dest: /etc/keepalived/keepalived.conf
        backup: true

    - name: "Creating haproxy.conf"
      template:
        src: templates/haproxy.cfg_templ
        dest: /etc/haproxy/haproxy.cfg
        backup: true

    - name: "Enabling vrrp in firewalld"
      firewalld:
        rich_rule: 'rule protocol value="vrrp" accept'
        permanent: yes
        immediate: yes
        state: enabled

    - name: "firewalld reloading"
      systemd:
        name: firewalld
        state: reloaded

    - name: "Starting and enabling keepalived and ha-proxy"
      systemd:
        name: keepalived
        state: restarted
        enabled: yes

    - systemd:
        name: haproxy
        state: restarted
        enabled: yes

    - name: "Starting and enabling docker and kubelet"
      systemd:
        name: docker
        state: restarted
        enabled: yes

    - systemd:
        name: kubelet
        state: restarted
        enabled: yes

    - name: "Kubernetes autocompletion getting ready"
      lineinfile:
        path: /root/.bashrc
        line: 'source <(kubectl completion bash)'
        insertbefore: EOF

    - name: "Creating kubectl alias for k as a handy method"
      lineinfile:
        path: /root/.bashrc
        line: 'alias k="kubectl"'
        insertbefore: EOF

    - name: "k autocomplete configuring"
      lineinfile:
        path: /root/.bashrc
        line: 'complete -F __start_kubectl k'
        insertbefore: EOF

    - name: "Deleting containerd toml"
      file:
        path: /etc/containerd/config.toml
        state: absent

    - name: "Restarting the containerd"
      systemd:
        name: containerd
        state: restarted
        enabled: yes

    - name: "Starting the kubernetes cluster with auth certificates for masters and clients"
      command: 'kubeadm init --pod-network-cidr=10.244.0.0/16 --service-cidr=10.18.0.0/24 --control-plane-endpoint "k8s-vip:8443" --upload-certs'
      register: kube_init

    - local_action:
        module: copy
        content: "{{ kube_init.stdout_lines }}"
        dest: output

    - name: "Creating kubernetes control plane"
      file:
        path: ~/.kube
        owner: root
        group: root
        state: directory
        mode: '0755'

    - name: "Copying admin.conf to local .kube/config"
      copy:
        src: '/etc/kubernetes/admin.conf'
        dest: '~/.kube/config'
        remote_src: yes
        owner: root
        group: root
        mode: 644

    - name: "Getting conf to local directory for client in kconf/ in the repository"
      fetch:
        src: /etc/kubernetes/admin.conf
        dest: kconf/
        flat: true

#-----------------------------------------------------------------------------------------------------------------------------------------------
#Ready with container network you can uncommnet this one if you want to go with weavenet, other wise canal is uncommented
#    - name: "Applying kubernetes network weave"
#      shell:
#        cmd: "export kubever=$(kubectl version | base64 | tr -d '\n'); kubectl apply -f https://cloud.weave.works/k8s/net?k8s-version=$kubever"
#-----------------------------------------------------------------------------------------------------------------------------------------------

    - name: "Applying kubernetes network Canal"
      shell:
        cmd: "curl https://projectcalico.docs.tigera.io/manifests/canal.yaml -O; kubectl apply -f canal.yaml"

    - name: "Metallb env setup - changing strictARP for MetalLB"
      shell:
        cmd: 'kubectl get configmap kube-proxy -n kube-system -o yaml | sed -e "s/strictARP: false/strictARP: true/" | kubectl apply -f - -n kube-system'

    - name: "Metallb env setup - creating metallb Namespace"
      command: kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.12.1/manifests/namespace.yaml

    - name: "Metallb env setup - metallb Deploy"
      command: kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.12.1/manifests/metallb.yaml

    - name: "Metallb env setup - creating member list"
      command: 'kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"'

    - name: "Metallb env setup - cleaning up tainted pods"
      command: 'kubectl taint nodes --all node-role.kubernetes.io/master-'

    - name: "Metallb env setup - applying config_map"
      template:
        src: templates/metallb_conf.yaml
        dest: /root
        mode: 644

    - name: "Metallb env setup - apply the config map"
      command: kubectl apply -f metallb_conf.yaml

    - name: "Metallb env setup - Metallb config_map"
      template:
        src: templates/pv.yaml
        dest: /root
        mode: 644

    - name: "Metallb env setup - apply the config map"
      command: kubectl apply -f pv.yaml


    - systemd:
        name: keepalived
        state: restarted
        enabled: yes

    - name: "Applying IP table rule1"
      shell:
        cmd: 'iptables -D  INPUT -j REJECT --reject-with icmp-host-prohibited'

    - name: "Applying IP table rule2"
      shell:
        cmd: 'iptables -D  FORWARD -j REJECT --reject-with icmp-host-prohibited'

- name: "Generating connection strings"
  hosts: 127.0.0.1
  connection: local
  tasks:
    - name: "Master string and slave string separation"
      script: py_scripts/get_con_string.py
      args:
        executable: /usr/bin/python3

    - name: "Deleting output file"
      file:
        path: output
        state: absent


- name: "Copying connection string to destinations"
  hosts: masters
  become: true
  tasks:
    - name: "Copying master_string to destination master machines"
      copy:
        src: master_string
        dest: ~/master_string.sh
        mode: 755

- name: "Copying slave_string to slave machines"
  hosts: slaves
  become: true
  tasks:
    - name: copy files to dest
      copy:
        src: slave_string
        dest: ~/slave_string.sh
        mode: 755
