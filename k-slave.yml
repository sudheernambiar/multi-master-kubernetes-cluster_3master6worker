---
- name: "Copying needed files to the slave machine"
  hosts: all
  become: true
  tasks:
    - name: "Joining string to the local machine, in case adding in a later point"
      copy:
        src: slave_string
        dest: ~/slave_string.sh
        mode: 755
        
- name: "Installing k8s worker node"
  hosts: all
  vars_files: 
    - vars/slave-variables
    - vars/host_values
  tasks:
    - name: "k8s worker node ready with kubernetes repo"
      copy:
        src: templates/kubernetes.repo
        dest: /etc/yum.repos.d/kubernetes.repo

    - name: "Installing yum-utils and chrony"
      yum:
        name:
          - yum-utils
          - chrony
        state: latest
        update_cache: True

    - name: "Setting timezone to Asia/Kolkata"
      timezone:
        name: Asia/Kolkata

    - name: "Sync ntp enabling"
      shell:
        cmd: 'timedatectl set-ntp true'

    - name: "restarting chrony"
      systemd:
        name: chronyd
        state: restarted
        enabled: yes

    - name: "Adding repos for docker"
      shell:
        cmd: 'yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo'

    - name: "rp_filter enabling"
      shell:
        cmd: 'echo 1 > /proc/sys/net/ipv4/conf/all/rp_filter'


    - name: "Updating all packages"
      yum:
        name: "*"
        state: latest
        update_cache: true
        
    - name: " {{ item.name }} installing"
      yum:
        name: "{{ item.name }}"
        state: latest
        update_cache: True

      when: item.required == True
      loop: "{{ packages }}"

    - name: "Starting and enabling docker and kubelet"
      systemd:
        name: docker
        state: restarted
        enabled: yes

    - systemd:
        name: kubelet
        state: restarted
        enabled: yes

    - name: "Replacing driver to systemd"
      lineinfile:
        path: /usr/lib/systemd/system/docker.service
        regexp: '^(.*)ExecStart=(.*)$'
        line: 'ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --exec-opt native.cgroupdriver=systemd'
        backrefs: yes

    - name: "Worker-node creating environment"
      file:
        path: /etc/systemd/system/kubelet.service.d/
        owner: root
        group: root
        state: directory
        mode: '0755'

    - name: "Configuring memory and accounting"
      shell:
        cmd: 'echo -e "[Service]\nCPUAccounting=true\nMemoryAccounting=true" > /etc/systemd/system/kubelet.service.d/11-cgroups.conf'
        
    - name: "Disabling SELinux"
      selinux:
        state: disabled
      register: sestatus

    - name: "local hosts file settingup"
      template: 
        src: templates/remote_hosts.tmpl 
        dest: /etc/hosts
        mode: 644
        owner: root
        group: root
        backup: yes

    - name: "Implementing firewall rules"
      firewalld:
        port: "{{item.port}}/{{item.proto}}"
        permanent: yes
        state: enabled
      loop: "{{ m_ports }}"

    - name: "Rebooting machine"
      reboot:
      when: sestatus.changed == true

    - name: "Waiting for server to restart"
      local_action:
        module: wait_for
          host={{ inventory_hostname }}
          port=22
          delay=10
          timeout=60
      when: sestatus.changed == true

    - name: "Setting up modprob br_netfilter and forward rules"
      shell:
        cmd: 'modprobe br_netfilter'
    - shell:
        cmd: "echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables"
    - shell:
        cmd: "echo '1' > /proc/sys/net/ipv4/ip_forward"

    - name: "Restarting docker and kubelet"
      systemd:
        name: docker
        state: restarted
        enabled: yes

    - systemd:
        name: kubelet
        state: restarted
        enabled: yes

    - name: "Deleting Containerd toml"
      file:
        path: /etc/containerd/config.toml
        state: absent

    - name: "Restarting the containerd"
      systemd:
        name: containerd
        state: restarted
        enabled: yes

    - name: "Deploying connection string for worker node"
      command: 'sh slave_string.sh'

    - name: "ip table rule1"
      shell:
        cmd: 'iptables -D  INPUT -j REJECT --reject-with icmp-host-prohibited'

    - name: "ip table rule2"
      shell:
        cmd: 'iptables -D  FORWARD -j REJECT --reject-with icmp-host-prohibited'
