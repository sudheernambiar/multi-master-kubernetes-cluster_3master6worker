---
- name: "Copying needed files to the master machine"
  hosts: all
  become: true
  tasks:
    - name: "Joining string to the local machine, in case adding in a later point"
      copy:
        src: master_string
        dest: ~/master_string.sh
        mode: 755

- name: "Installing kubernetes co-master machines"
  hosts: all
  vars_files:
    - vars/mast-variables
    - vars/host_values
  tasks:
    - name: "Install yum-utils and chrony"
      yum:
        name:
          - yum-utils
          - chrony
        state: latest
        update_cache: True
        
    - name: "Seting up timezone to Asia/Kolkata"
      timezone:
        name: Asia/Kolkata

    - name: "enabling ntp sync with timedatectl"
      shell:
        cmd: 'timedatectl set-ntp true'

    - name: "restartting and enabling chronyd"
      systemd:
        name: chronyd
        state: restarted
        enabled: yes

    - name: "Adding kubernetes repo"
      copy:
        src: templates/kubernetes.repo
        dest: /etc/yum.repos.d/kubernetes.repo

    - name: "Enabling rp_filter"
      shell:
        cmd: 'echo 1 > /proc/sys/net/ipv4/conf/all/rp_filter'

    - name: "adding docker repo"
      shell:
        cmd: 'yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo'

    - name: "Changing Hostname"
      hostname:
        name: "{{ host_name }}"

    - name: "Updating all packages"
      yum:
        name: "*"
        state: latest
        update_cache: true

    - name: " {{ item.name }} installing"
      yum:
        name: "{{ item.name }}"
        state: latest
        update_cache: True

      when: item.required == True
      loop: "{{ packages }}"

    - name: "Restarting docker and kubelet"
      systemd:
        name: docker
        state: restarted
        enabled: yes

    - systemd:
        name: kubelet
        state: restarted
        enabled: yes

    - name: "changing the driver to systemd"
      lineinfile:
        path: /usr/lib/systemd/system/docker.service
        regexp: '^(.*)ExecStart=(.*)$'
        line: 'ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --exec-opt native.cgroupdriver=systemd'
        backrefs: yes

    - name: "Creating environment"
      file:
        path: /etc/systemd/system/kubelet.service.d/
        owner: root
        group: root
        state: directory
        mode: '0755'

    - name: "adding memory and accounting configs"
      shell:
        cmd: 'echo -e "[Service]\nCPUAccounting=true\nMemoryAccounting=true" > /etc/systemd/system/kubelet.service.d/11-cgroups.conf'

    - name: "disabling SELinux"
      selinux:
        state: disabled
      register: sestatus

    - name: "Adding local host entry"
      template:
        src: templates/remote_hosts.tmpl
        dest: /etc/hosts
        mode: 644
        owner: root
        group: root
        backup: yes

    - name: "implementing firewall rules"
      firewalld:
        port: "{{item.port}}/{{item.proto}}"
        permanent: yes
        state: enabled
      loop: "{{ m_ports }}"

    - name: "rebooting"
      reboot:
      when: sestatus.changed == true

    - name: "Waiting for the server back to online"
      local_action:
        module: wait_for
          host={{ inventory_hostname }}
          port=22
          delay=10
          timeout=60
      when: sestatus.changed == true

    - name: "enabling modprob br_netfilter and forward rules"
      shell:
        cmd: 'modprobe br_netfilter'

    - shell:
        cmd: "echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables"
    - shell:
        cmd:  "echo '1' > /proc/sys/net/ipv4/ip_forward"


    - name: "creating the check api shell for keepalived"
      template:
        src: templates/check_apiserver.sh_templ
        dest: /etc/keepalived/check_apiserver.sh
        mode: '755'

    - name: "Creating keepalived.conf"
      template:
        src: templates/keepalived.conf.templ
        dest: /etc/keepalived/keepalived.conf
        backup: true

    - name: "Creating haproxy.conf"
      template:
        src: templates/haproxy.cfg_templ
        dest: /etc/haproxy/haproxy.cfg
        backup: true

    - name: "Enabling vrrp in firewalld"
      firewalld:
        rich_rule: 'rule protocol value="vrrp" accept'
        permanent: yes
        immediate: yes
        state: enabled

    - name: "Firewall reloading"
      systemd:
        name: firewalld
        state: reloaded

    - name: "Start and enable keep alive and ha proxy"
      systemd:
        name: keepalived
        state: restarted
        enabled: yes

    - systemd:
        name: haproxy
        state: restarted
        enabled: yes
        
    - name: "Start and enable keep alive and ha proxy"
      systemd:
        name: docker
        state: restarted
        enabled: yes

    - systemd:
        name: kubelet
        state: restarted
        enabled: yes

    - name: "deleting Containerd toml"
      file:
        path: /etc/containerd/config.toml
        state: absent

    - name: "restartting the containerd"
      systemd:
        name: containerd
        state: restarted
        enabled: yes

    - name: "Master machine joining in as control plane"
      command: "sh master_string.sh"


    - name: "Creating environment"
      file:
        path: ~/.kube
        owner: root
        group: root
        state: directory
        mode: '0755'

    - copy:
        src: /etc/kubernetes/admin.conf
        dest: ~/.kube/config
        remote_src: yes
        owner: root
        group: root

    - name: "adding ip table rule1"
      shell:
        cmd: 'iptables -D  INPUT -j REJECT --reject-with icmp-host-prohibited'

    - name: "adding ip table rule2"
      shell:
        cmd: 'iptables -D  FORWARD -j REJECT --reject-with icmp-host-prohibited'

